#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import sys
import traceback

import email
import smtplib

from email.mime.text import MIMEText
from email.header import Header, decode_header
from email.utils import formatdate, make_msgid

try:
    import wxversion
    wxversion.select("3.0")
except:
    pass

import wx
from wx import xrc

# ========================================================================
# Colored output
# ========================================================================

try:
    from colorama import init, Fore, Back
    init()
    cRSP = Fore.GREEN
    cLOG = Fore.YELLOW
    cERR = Fore.WHITE + Back.RED
    cRST = Fore.RESET + Back.RESET
except ImportError:
    cRSP = u''
    cLOG = u''
    cERR = u''
    cRST = u''

# ========================================================================
# Default headers
# ========================================================================

DEFAULT_HEADER = [[u'Subject',  lambda: u'Subject: '],
                  [u'Date',     lambda: u'Date: %s' % formatdate()],
                  [u'MsgId',    lambda: u'Message-ID: %s' % make_msgid()],
                  [u'X-Mailer', lambda: u'X-Mailer: '],
                  [u'UA',       lambda: u'User-Agent: ']
                 ]

# ========================================================================
# Skip these headers while opening a mail
# ========================================================================

SKIP = ['Content-Transfer-Encoding', 'Content-Type', 'MIME-Version']

# ========================================================================
# Tooltips
# ========================================================================

tipServer = u"Server:Port"
tipSender = u"Envelope Sender"
tipRecipient = u"Recipients, comma separated"

# ========================================================================
# Console messages
# ========================================================================


def log(message, err=False):
    if type(message) is tuple:
        print(cRSP + u"%s: %s" % (message[0], message[1]) + cRST)
    elif err:
        print(cERR + u"%s" % message + cRST)
    else:
        print(cLOG + u"%s" % message + cRST)

# ========================================================================
# Restâ€¦
# ========================================================================


class SendMail(object):

    def __init__(self, server, user, password, ssl, sender, recipient):
        self.wxServer = server
        self.wxUser = user
        self.wxPassword = password
        self.wxSSL = ssl
        self.wxSender = sender
        self.wxRCPT = recipient

        self.wxServer.SetToolTip(wx.ToolTip(tipServer))
        self.wxSender.SetToolTip(wx.ToolTip(tipSender))
        self.wxRCPT.SetToolTip(wx.ToolTip(tipRecipient))

    @property
    def host(self):
        return self.wxServer.GetValue().split(':')[0]

    @property
    def port(self):
        try:
            return int(self.wxServer.GetValue().split(':')[1])
        except IndexError:
            return 25

    @property
    def username(self):
        return self.wxUser.GetValue()

    @property
    def password(self):
        return self.wxPassword.GetValue()

    @property
    def SSL(self):
        return self.wxSSL.IsChecked()

    @property
    def sender(self):
        return self.wxSender.GetValue()

    @property
    def recipient(self):
        return [x.strip() for x in self.wxRCPT.GetValue().split(",")]

    def send(self, message):
        smtp = smtplib.SMTP()
        try:
            log(u"Connecting to: %s port %s..." % (self.host, self.port))
            log(smtp.connect(self.host, self.port))
            if self.SSL:
                log(u"starttls...")
                log(smtp.starttls())
            log(u"sending ehlo...")
            log(smtp.ehlo())
            if self.username != '':
                log(u"authenticate as %s..." % self.username)
                log(smtp.login(self.username, self.password))
            log(u"sending mail...")
            log(smtp.sendmail(self.sender, self.recipient, message))
            log(u"mail sent.")
        except:
            e = sys.exc_info()
            log(u"Exception: %s" % repr(e[0]), err=True)
            log(e[1], err=True)
            traceback.print_tb(e[2])
            raise
        finally:
            log(u"closing connection...")
            log(smtp.quit())
            log(u"closed.")

    def set_recipients(self, recipients):
        self.wxRCPT.SetValue(u", ".join(recipients))


class Message(object):

    def __init__(self, widget):
        self.wxMessage = widget

    def decode_header(self, header):
        [(h, e)] = decode_header(header)
        return h.decode(e) if e is not None else h

    def load(self, mail):
        msg = email.message_from_string(mail)
        header = u"\n".join([u": ".join([i, self.decode_header(j)])
                            for i, j in [x for x in msg.items() if x[0] not in SKIP]
                             ])
        body = msg.get_payload(decode=True).decode(msg.get_content_charset())
        self.wxMessage.SetValue(u"%s\n\n%s" % (header, body))

    @property
    def header(self):
        header = []
        for h in self.wxMessage.GetValue().split("\n\n", 1)[0].split("\n"):
            if h[0] in [" ", "\t"]:
                header[-1][1] += "\n\t" + h.strip()
            else:
                header.append([j.strip() for j in h.split(":", 1)])
        return header

    @property
    def body(self):
        return self.wxMessage.GetValue().split("\n\n", 1)[1]

    @property
    def recipients(self):
        r = []
        for x in [x[1] for x in self.header if x[0].lower() in ['to', 'cc', 'bcc']]:
            r += [y.strip() for y in x.split(',')]
        return r

    def __str__(self):
        msg = MIMEText(self.body.encode('utf-8'), 'plain', _charset='utf-8')
        for i in self.header:
            msg[i[0]] = Header(i[1].encode('utf-8'), 'utf-8')
        return msg.as_string()

    def insertText(self, text):
        pos = self.wxMessage.GetInsertionPoint()
        val = self.wxMessage.GetValue()
        self.wxMessage.SetValue(val[0:pos] + text + val[pos:])
        self.wxMessage.SetInsertionPoint(pos)


class App(wx.App):

    def OnInit(self):
        self.res = xrc.XmlResource('form.xrc')
        self.initFrm()
        self.frame.SetSize((800, 600))
        self.frame.Show()
        return True

    def initFrm(self):
        self.frame = self.res.LoadFrame(None, 'frameMail')
        self.btnSend = xrc.XRCCTRL(self.frame, 'Send')
        self.btnTA = xrc.XRCCTRL(self.frame, 'TakeAddresses')
        self.sendmail = SendMail(xrc.XRCCTRL(self.frame, 'Address'),
                                 xrc.XRCCTRL(self.frame, 'User'),
                                 xrc.XRCCTRL(self.frame, 'Pass'),
                                 xrc.XRCCTRL(self.frame, 'SSL'),
                                 xrc.XRCCTRL(self.frame, 'Sender'),
                                 xrc.XRCCTRL(self.frame, 'Recipient'))
        self.message = Message(xrc.XRCCTRL(self.frame, 'Message'))
        self.btnSend.Bind(wx.EVT_BUTTON, self.onSend)
        self.btnTA.Bind(wx.EVT_BUTTON, self.envelopeTo)
        self.Bind(wx.EVT_BUTTON, self.onQuit, id=wx.ID_EXIT)
        self.Bind(wx.EVT_BUTTON, self.onOpen, id=wx.ID_OPEN)
        self.Bind(wx.EVT_BUTTON, self.onSave, id=wx.ID_SAVE)

        self.pHeader = xrc.XRCCTRL(self.frame, 'pHeader')
        self.initHeaderButtons()

    def initHeaderButtons(self):
        sizer = wx.FlexGridSizer(vgap=5, hgap=5)
        self.headertbl = dict()
        for i in DEFAULT_HEADER:
            btn = wx.Button(self.pHeader, -1, i[0], style=wx.BU_EXACTFIT)
            self.headertbl[btn.GetId()] = i[1]
            btn.Bind(wx.EVT_BUTTON, self.onHeaderBtn)
            sizer.Add(btn)
        sizer.Add((20, 20))
        self.pHeader.SetSizer(sizer)
        self.frame.Layout()

    def onHeaderBtn(self, event=None):
        self.message.insertText(self.headertbl[event.GetId()]())

    def onQuit(self, event=None):
        self.Exit()

    def onSend(self, event=None):
        print(u"\nSending mail...")
        self.sendmail.send(str(self.message))
        wx.MessageDialog(self.frame, u"Mail sent", "Status",
                         wx.OK | wx.CENTRE | wx.ICON_INFORMATION).ShowModal()

    def onOpen(self, event=None):
        dlg = wx.FileDialog(self.frame, u"Open mail...", style=wx.FD_OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            with open(dlg.GetPath(), 'r') as f:
                self.message.load(f.read())

    def onSave(self, event=None):
        dlg = wx.FileDialog(self.frame, u"Save Mail as...",
                            style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
        if dlg.ShowModal() == wx.ID_OK:
            with open(dlg.GetPath(), 'w') as f:
                f.write(str(self.message))

    def envelopeTo(self, event=None):
        self.sendmail.set_recipients(self.message.recipients)


def excepthook(etype, value, tb):
    print(u"%s\n%s" % (etype, value))
    traceback.print_tb(tb)
    wx.MessageDialog(None, u"%s" % value, u"Exception: %s" % repr(etype),
                     wx.OK | wx.CENTRE | wx.ICON_ERROR).ShowModal()

if __name__ == '__main__':
    app = App(redirect=False)
    sys.excepthook = excepthook
    app.MainLoop()
